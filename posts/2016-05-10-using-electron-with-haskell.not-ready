---
title: Using Electron with Haskell
tags: haskell, electron
---

_Versions used:_

* _Electron 0.37.8_
* _node 5.10.0_

Not much exists on using Electron as the GUI tool for Haskell development, so I thought I'd explore the space a litte. Being a bit clueless initially about how Electron would launch the Haskell webserver, I was watching [the Electron meetup talk by Mike Craig from Wagon HG](https://youtu.be/mUAu7lcgYWE?t=6m54s) (they use Electron with Haskell) and noticed they actually mention it on the slides:

<blockquote>
    * Statically compiled Haskell executable
    * Shipped in Electron app bundle
    * main.js in Electron spawns the subprocess
    * Executable creates a localhost HTTP server
    * JS talks to Haskell over AJAX
</blockquote>

Importantly the bit `main.js in Electron spawns the subprocess` is the part that was somehow missing in my mental model of how this would be structured.

Riding on this epiphany, I decided to document my exploration, seeing as this is an area that is sorely lacking (GUI programming in general in Haskell).

Before we start anything, let me mention the project folder structure

## Setting up Electron
Electron has a nice [quick start guide](http://electron.atom.io/docs/latest/tutorial/quick-start/), which helps you get going fairly, well, quick. For our purposes, the following will set up the initial app we will use throughout.

<div class="snippet-title">In your shell/terminal</div>
```prettyprint
$ git clone https://github.com/electron/electron-quick-start haskell-app
$ cd haskell-app
$ npm install && npm start
```

And that's it, really. You've now got a basic Electron app running locally. Before doing more here, let's look at the Haskell side.


## Setting up the Haskell webserver
We'll be using the [Yesod framework](http://www.yesodweb.com), but you could really use anything that'll run a webserver (such as [servant](http://haskell-servant.readthedocs.io/en/stable/)).

Assuming that `stack` is installed, you can set up a new project with `stack new backend yesod-sqlite`, which will use the Yesod template with an SQLite database. For the lack of a better named I have called the application `backend`, which could really be anything you fancy.



## Combining the two

### Launching the Haskell webserver
